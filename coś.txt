// ChatApp.jsx
import "./ChatApp.css";
import { useState, useEffect } from "react";
import PropTypes from "prop-types";

export default function ChatApp({ onGoBack, chat, setChat, activeChat, setActiveChat }) {
  const [inputValue, setInputValue] = useState("");
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    const currentChat = chat.find(c => c.id === activeChat);
    if (currentChat) {
      setMessages(currentChat.messages);
    }
  }, [chat, activeChat]);

  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };

  const sendMessage = () => {
    if (inputValue.trim() === "") return;

    const newMessage = {
      type: "prompt",
      text: inputValue,
      timestamp: new Date().toLocaleTimeString(),
    };

    const updatedMessages = [...messages, newMessage];
    setMessages(updatedMessages);
    setInputValue("");

    const updatedChats = chat.map((chatItem) => {
      if (chatItem.id === activeChat) {
        return { ...chatItem, messages: updatedMessages };
      }
      return chatItem;
    });

    setChat(updatedChats);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      sendMessage();
    }
  };

  const handleSelectChat = (id) => {
    setActiveChat(id);
  };

  const handleDeleteChat = (e, id) => {
    e.stopPropagation();
    const updatedChats = chat.filter(c => c.id !== id);
    setChat(updatedChats);
    if (activeChat === id) {
      const newActive = updatedChats.length > 0 ? updatedChats[0].id : null;
      setActiveChat(newActive);
    }
  };

  if (!chat || chat.length === 0) {
    return <div className="chat-window">Ładowanie czatu...</div>;
  }

  return (
    <div className="chat-app">
      {/* Lista czatów */}
      <div className="chat-list">
        <div className="chat-list-header">
          <h2>Chat List</h2>
          <i className="bx bx-edit-alt new-chat" onClick={() => setActiveChat(null)}></i>
        </div>

        {chat.map((chatItem) => (
          <div
            key={chatItem.id}
            className={`chat-list-item ${chatItem.id === activeChat ? "active" : ""}`}
            onClick={() => handleSelectChat(chatItem.id)}
          >
            <h4>{chatItem.id}</h4>
            <i
              className="bx bx-x-circle"
              onClick={(e) => handleDeleteChat(e, chatItem.id)}
            ></i>
          </div>
        ))}
      </div>

      {/* Okno czatu */}
      <div className="chat-window">
        <div className="chat-title">
          <h3>Chat z AI</h3>
          <i className="bx bx-arrow-back arrow" onClick={onGoBack}></i>
        </div>

        <div className="chat">
          {messages.map((msg, index) => (
            <div key={index} className={msg.type === "prompt" ? "prompt" : "response"}>
              {msg.text} <span>{msg.timestamp}</span>
            </div>
          ))}
          <div className="typing">Typing...</div>
        </div>

        <form className="msg-form" onSubmit={(e) => e.preventDefault()}>
          <i className="fa-solid fa-face-smile emoji"></i>
          <input
            type="text"
            className="msg-input"
            placeholder="Napisz pytanie ..."
            value={inputValue}
            onChange={handleInputChange}
            onKeyDown={handleKeyDown}
          />
          <i className="fa-solid fa-paper-plane" onClick={sendMessage}></i>
        </form>
      </div>
    </div>
  );
}

ChatApp.propTypes = {
  onGoBack: PropTypes.func.isRequired,
  chat: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      messages: PropTypes.arrayOf(
        PropTypes.shape({
          type: PropTypes.string.isRequired,
          text: PropTypes.string.isRequired,
          timestamp: PropTypes.string.isRequired,
        })
      ),
    })
  ).isRequired,
  setChat: PropTypes.func.isRequired,
  activeChat: PropTypes.string,
  setActiveChat: PropTypes.func,
};





import Start from "./components/Start";
import ChatApp from "./components/ChatApp";
import "../src/index.css";
import { useState } from "react";

export default function App() {
  const [isChatting, setIsChatting] = useState(false);
  const [chat, setChat] = useState([]);
  const [activeChat, setActiveChat] = useState(null);

  const createNewChat = () => {
    const newChat = {
      id: `Chat ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,
      messages: [],
    };
    const updatedChats = [newChat, ...chat];
    setChat(updatedChats);
    setActiveChat(newChat.id);
  };

  const handleStart = () => {
    if (chat.length === 0) {
      createNewChat();
    }
    setIsChatting(true); // przejście do czatu po kliknięciu "Start"
  };

  const handleGoBack = () => {
    setIsChatting(false); // powrót do ekranu Start
  };

  return (
    <div className="container">
      {isChatting ? (
        chat.length > 0 ? (
          <ChatApp
            onGoBack={handleGoBack}
            chat={chat}
            setChat={setChat}
            activeChat={activeChat}
            setActiveChat={setActiveChat} // <-- ważne!
          />
        ) : (
          <div>Ładowanie czatu...</div>
        )
      ) : (
        <Start onStart={handleStart} />
      )}
    </div>
  );
}
